#+Title: Yay-Evil distro by Ian Y.E. Pan
#+Author: Ian Y.E. Pan
#+Date: 2019
Welcome! This Emacs "distro" is based on my personal Emacs configuration (on GNU Emacs 26.3). It's unopinionated and was created for general use in mind. The package settings are grouped in a logical manner, and I've documented as detailed as possible what each code snippet does in this file.
* Settings without corresponding packages
Clean up the UI and enhance some basic defaults defined in "C Source Code". The variable ~ian/indent-width~ controls the default indentation across various programming modes. The default is 4, you can change this variable to 2 or any other indentation width you prefer, and the change will be made across all programming language modes including C, C++, Java, JavaScript, Python etc.
#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :preface
    (defvar ian/indent-width 4) ; change this value to your preferred width
    :config
    (setq ;frame-title-format '("Yay-Evil") ; Yayyyyy Evil!
          ;ring-bell-function 'ignore       ; minimise distraction
          frame-resize-pixelwise t
          default-directory "~/")

    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (tabbar-mode -1)

    ;; better scrolling experience
    (setq scroll-margin 0
          scroll-conservatively 10000
          scroll-preserve-screen-position t
          auto-window-vscroll nil)

    ;; increase line space for better readability
    (setq-default line-spacing 3)

    ;; Always use spaces for indentation
    (setq-default indent-tabs-mode nil
                  tab-width ian/indent-width))
#+END_SRC
* Configuration for built-in packages
Since we're using use-package as our package management system, we might as well try to organise under the same syntax as much as possible to keep the configuration consistent. The option ~use-package-always-ensure~ is turned on in ~init.el~, so we'll add ~:ensure nil~ when configuring the built-in packages.
** Omit default startup screen
#+BEGIN_SRC emacs-lisp
  (use-package "startup"
    :ensure nil
    :config (setq inhibit-startup-screen t))
#+END_SRC
** Modernise selection behaviour
Replace the active region just by typing text, just like modern editors
#+BEGIN_SRC emacs-lisp
  (use-package delsel
    :ensure nil
    :config (delete-selection-mode +1))
#+END_SRC
** Disable scroll-bar
#+BEGIN_SRC emacs-lisp
  (use-package scroll-bar
    :ensure nil
    :config (scroll-bar-mode -1))
#+END_SRC
** Enable column numbers
#+BEGIN_SRC emacs-lisp
  (use-package simple
    :ensure nil
    :config (column-number-mode +1))
#+END_SRC
** Split right and split below
The Emacs default split doesn't seem too intuitive for the majority of users.
#+BEGIN_SRC emacs-lisp
  (use-package "window"
    :ensure nil
    :preface
    (defun ian/split-and-follow-horizontally ()
      "Split window below."
      (interactive)
      (split-window-below)
      (other-window 1))
    (defun ian/split-and-follow-vertically ()
      "Split window right."
      (interactive)
      (split-window-right)
      (other-window 1))
    :config
    (global-set-key (kbd "C-x 2") #'ian/split-and-follow-horizontally)
    (global-set-key (kbd "C-x 3") #'ian/split-and-follow-vertically))
#+END_SRC
** File-related tweaks
Don't bother confirming killing processes and don't let backup~ files scatter around
#+BEGIN_SRC emacs-lisp
  (use-package files
    :ensure nil
    :config
    (setq confirm-kill-processes nil
          make-backup-files nil))
#+END_SRC
** Automatically refreshes the buffer for changes outside of Emacs
Auto refreshes every 2 seconds. Don't forget to refresh the version control status as well.
#+BEGIN_SRC emacs-lisp
  (use-package autorevert
    :ensure nil
    :config
    (global-auto-revert-mode +1)
    (setq auto-revert-interval 2
          auto-revert-check-vc-info t
          global-auto-revert-non-file-buffers t
          auto-revert-verbose nil))
#+END_SRC
** Eldoc: documentation in the mini-buffer
Only use eldoc in prog-mode (by defaults it's turned on globally, but reports say it hinders performance).
#+BEGIN_SRC emacs-lisp
  (use-package eldoc
    :ensure nil
    :diminish eldoc-mode
    :config
    (global-eldoc-mode +1)
    (setq eldoc-idle-delay 0.4))
#+END_SRC
** Indentation improvement
For Java and C/C++, change the formatting style from GNU (the default) to the more standard K&R. Here we also set the indentation width of C, C++, Java, JavaScript, and Python to the preferred value defined in ~ian/indent-width~. Of course, you can change the value depending on the language as well.
#+BEGIN_SRC emacs-lisp
  ;; C, C++, and Java
  (use-package cc-vars
    :ensure nil
    :config
    (setq-default c-basic-offset ian/indent-width)
    (setq c-default-style '((java-mode . "java")
                            (awk-mode . "awk")
                            (other . "k&r"))))

  ;; JavaScript
  (use-package js
    :ensure nil
    :config (setq js-indent-level ian/indent-width))

  ;; Python (both v2 and v3)
  (use-package python
    :ensure nil
    :config (setq python-indent-offset ian/indent-width))
#+END_SRC
** Mouse wheel (track-pad) scroll speed
By default, the scrolling is way too fast to be precise and helpful, let's tune it down a little bit.
#+BEGIN_SRC emacs-lisp
  (use-package mwheel
    :ensure nil
    :config (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))
                  mouse-wheel-progressive-speed nil))
#+END_SRC
** Show matching parentheses
Reduce the highlight delay to instantly.
#+BEGIN_SRC emacs-lisp
  (use-package paren
    :ensure nil
    :init (setq show-paren-delay 0)
    :config (show-paren-mode +1))
#+END_SRC
** Setting up some frame defaults
Maximise the frame by default on start-up. Set the font to Menlo size 13, if Menlo is installed.
#+BEGIN_SRC emacs-lisp
  (use-package frame
    :ensure nil
    :config
    (setq initial-frame-alist (quote ((fullscreen . maximized))))
    (when (member "Menlo" (font-family-list))
      (set-frame-font "menlo-13:weight=regular" t t)))
#+END_SRC
** Ediff tweaks
Enter ediff with side-by-side buffers to better compare the differences.
#+BEGIN_SRC emacs-lisp
  (use-package ediff
    :ensure nil
    :config (setq ediff-split-window-function 'split-window-horizontally))
#+END_SRC
** Auto-pairing quotes and parentheses etc.
Electric-pair-mode has improved quite a bit in recent Emacs versions. No longer need an extra package for this. It also takes care of the new-line-and-push-brace feature.
#+BEGIN_SRC emacs-lisp
  (use-package elec-pair
    :ensure nil
    :hook (prog-mode . electric-pair-mode))
#+END_SRC
** Clean up whitespace on save
#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :ensure nil
    :hook (before-save . whitespace-cleanup))
#+END_SRC
** Dired tweaks
Delete intermediate buffers when navigating through dired.
#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :config
    (setq delete-by-moving-to-trash t)
    (eval-after-load "dired"
      #'(lambda ()
          (put 'dired-find-alternate-file 'disabled nil)
          (define-key dired-mode-map (kbd "RET") #'dired-find-alternate-file))))
#+end_src
** Dump custom-set-variables to a garbage file and don't load it
#+BEGIN_SRC emacs-lisp
  (use-package cus-edit
    :ensure nil
    :config
    (setq custom-file "~/.emacs.d/to-be-dumped.el"))
#+END_SRC
* Third-party packages
Many Emacsers love having tons of packages -- and that's absolutely fine! However, one of the goals of the Yay-Evil distro is to provide an essential-only foundation for users to build upon. Therefore, only the most important packages and/or lightweight improvements will be included here. For example, completion frameworks like Ivy or Helm are considered heavy by many, yet the built-in Ido serves almost the same purpose. The only arguably opinionated package is probably Evil, but you probably saw that coming from the distro name, didn't you ;) ? If you prefer the default keybindings, simply disable the section that controls the Evil behaviours.

Normally, we need to add ~:ensure t~ to tell ~use-package~ to download packages when it's not available. But since we've added ~use-package-always-ensure~ in ~init.el~, we can omit it.
** GUI enhancements
*** Load custom theme
#+BEGIN_SRC emacs-lisp
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
  ;(load-theme 'wilmersdorf t)
  (load-theme 'wombat t)
#+END_SRC
*** Dashboard welcome page (commented out)
#+BEGIN_SRC emacs-lisp
  ;; (use-package dashboard
  ;;   :config
  ;;   (dashboard-setup-startup-hook)
  ;;   (setq dashboard-startup-banner 'logo
  ;;         dashboard-banner-logo-title "Yay Evil!"
  ;;         dashboard-items nil
  ;;         dashboard-set-footer nil))
#+END_SRC
*** Syntax highlighting
Lightweight syntax highlighting improvement for numbers, operators, and escape sequences.
#+BEGIN_SRC emacs-lisp
  (use-package highlight-numbers
    :hook (prog-mode . highlight-numbers-mode))

  (use-package highlight-operators
    :hook (prog-mode . highlight-operators-mode))

  (use-package highlight-escape-sequences
    :hook (prog-mode . hes-mode))
#+END_SRC
** Searching/sorting enhancements & project management
*** Ido, ido-vertical, ido-ubiquitous and fuzzy matching (commented out)
Selecting buffers/files with great efficiency. In my opinion, Ido is enough to replace Ivy/Counsel and Helm. We install ido-vertical to get a better view of the available options (use ~C-n~, ~C-p~ or arrow keys to navigate). Ido-ubiquitous (from the ~ido-completing-read+~ package) provides us ido-like completions in describing functions and variables etc. Fuzzy matching is a nice feature and we have flx-ido for that purpose.
#+BEGIN_SRC emacs-lisp
  ;; (use-package ido
  ;;   :config
  ;;   (ido-mode +1)
  ;;   (setq ido-everywhere t
  ;;         ido-enable-flex-matching t))

  ;; (use-package ido-vertical-mode
  ;;   :config
  ;;   (ido-vertical-mode +1)
  ;;   (setq ido-vertical-define-keys 'C-n-C-p-up-and-down))

  ;; (use-package ido-completing-read+ :config (ido-ubiquitous-mode +1))

  ;; (use-package flx-ido :config (flx-ido-mode +1))
#+END_SRC
** Programming language support and utilities
*** Company for auto-completion
Use ~C-n~ and ~C-p~ to navigate the tooltip.
#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish company-mode
    :hook (prog-mode . company-mode)
    :config
    (setq company-minimum-prefix-length 1
          company-idle-delay 0.1
          company-selection-wrap-around t
          company-tooltip-align-annotations t
          company-frontends '(company-pseudo-tooltip-frontend ; show tooltip even for single candidate
                              company-echo-metadata-frontend))
    (with-eval-after-load 'company
      (define-key company-active-map (kbd "C-n") 'company-select-next)
      (define-key company-active-map (kbd "C-p") 'company-select-previous)))
#+END_SRC
*** Flycheck
A modern on-the-fly syntax checking extension -- absolute essential
#+BEGIN_SRC emacs-lisp
  (use-package flycheck :config (global-flycheck-mode +1))
#+END_SRC
*** Org Mode
Some minimal org mode tweaks: org-bullets gives our headings (h1, h2, h3...) a more visually pleasing look.
#+BEGIN_SRC emacs-lisp
  (use-package org
    :hook ((org-mode . visual-line-mode)
           (org-mode . org-indent-mode)))

  (use-package org-bullets :hook (org-mode . org-bullets-mode))
#+END_SRC
*** Yasnippet & yasnippet-snippets
Use TAB to expand snippets. The code snippet below also avoids clashing with company-mode.
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet-snippets
    :config
    (yas-global-mode +1)
    (advice-add 'company-complete-common
                :before
                (lambda ()
                  (setq my-company-point (point))))
    (advice-add 'company-complete-common
                :after
                (lambda ()
                  (when (equal my-company-point (point))
                    (yas-expand)))))
#+END_SRC
*** Useful major modes
Markdown mode and JSON mode
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode :hook (markdown-mode . visual-line-mode))

  (use-package json-mode)
#+END_SRC
** Miscellaneous
*** Diminish minor modes
The diminish package is used to hide unimportant minor modes in the modeline. It provides the ~:diminish~ keyword we've been using in other use-package declarations.
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :demand t)
#+END_SRC
*** Which-key
Provides us with hints on available keystroke combinations.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :config
    (which-key-mode +1)
    (setq which-key-idle-delay 0.4
          which-key-idle-secondary-delay 0.4))
#+END_SRC
*** Configure PATH on macOS
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :config (when (memq window-system '(mac ns x))
              (exec-path-from-shell-initialize)))
#+END_SRC
** Enable ivy/company stuff
#+BEGIN_SRC emacs-lisp
  (use-package prescient
    :config
    (prescient-persist-mode +1)
    (ivy-prescient-mode +1)
    (company-prescient-mode +1)
)
#+END_SRC

#+BEGIN_SRC emacs-lisp
   (use-package ivy :ensure t
     :diminish (ivy-mode . "")
     :bind
     (:map ivy-mode-map
      ; https://github.com/abo-abo/avy
      ("C-'" . ivy-avy))
     :config
     (ivy-mode +1)
     (counsel-mode +1)
     ;; add ‘recentf-mode’ and bookmarks to ‘ivy-switch-buffer’.
     (setq ivy-use-virtual-buffers t)
     ;; ?
     (setq enable-recursive-minibuffers t)
     ;; number of result lines to display
     ;;(setq ivy-height 10)
     ;; does not count candidates
     ;;(setq ivy-count-format "")
     ;; no regexp by default
     (setq ivy-initial-inputs-alist nil)
     ;; configure regexp engine.
     (setq ivy-re-builders-alist
       ;; allow input not in order
           '((t   . ivy--regex-ignore-order)))

     (ivy-rich-mode +1)
     ;(ivy-explorer-mode +1)

     ;; this only works in the GUI and errors in the terminal
     ;; https://github.com/clemera/ivy-explorer
     ;;(setq ivy-explorer-message-function 'ivy-explorer-posframe)

     ;; enable this if you want `swiper' to use it
     ;; (setq search-default-mode #'char-fold-to-regexp)
     (global-set-key "\C-s" 'swiper)
     (global-set-key (kbd "C-c C-r") 'ivy-resume)
     (global-set-key (kbd "<f6>") 'ivy-resume)
     ;; (global-set-key (kbd "M-x") 'counsel-M-x)
     ;; (global-set-key (kbd "C-x C-f") 'counsel-find-file)
     ;; (global-set-key (kbd "<f1> f") 'counsel-describe-function)
     ;; (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
     ;; (global-set-key (kbd "<f1> l") 'counsel-find-library)
     ;; (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
     ;; (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
     ;; (global-set-key (kbd "C-c g") 'counsel-git)
     ;; (global-set-key (kbd "C-c j") 'counsel-git-grep)
     ;; (global-set-key (kbd "C-c k") 'counsel-ag)
     ;; (global-set-key (kbd "C-x l") 'counsel-locate)
     ;; (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
     (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
   )

     (use-package mac-pseudo-daemon
       :config
       (mac-pseudo-daemon-mode +1)
     )

     ;; (defadvice handle-delete-frame (around my-handle-delete-frame-advice activate)
     ;; "Hide Emacs instead of closing the last frame"
     ;; (let ((frame   (posn-window (event-start event)))
     ;;       (numfrs  (length (frame-list))))
     ;;   (if (> numfrs 1)
     ;;     ad-do-it
     ;;      (do-applescript "tell application \"System Events\" to tell process \"Emacs\" to set visible to false"))))

#+END_SRC
** Config from old .emacs.d
#+BEGIN_SRC emacs-lisp

#+END_SRC

** Org-mode config from old .emacs.d
#+BEGIN_SRC emacs-lisp

#+END_SRC

* Configuration from old .emacs.d
** bookmarks.el
#+BEGIN_SRC emacs-lisp
;; bookmarks -- http://www.nongnu.org/bm/
(require 'bm)
;; M$ Visual Studio key setup.
(global-set-key [f2] 'bm-toggle)
(global-set-key [f5] 'bm-next)
(global-set-key [f6] 'bm-previous)
#+END_SRC
** company.el
#+BEGIN_SRC emacs-lisp
;; https://company-mode.github.io/

(add-hook 'after-init-hook 'global-company-mode)

;; http://psung.blogspot.com/2008/05/from-dabbrev-expand-to-hippie-expand.html
(global-set-key "\M-/" 'company-complete)
#+END_SRC
** general.el
#+BEGIN_SRC emacs-lisp
;; starts an emacs server so as to be available to emacsclient
(require 'server)
(or (server-running-p)
    (server-start))
;; prevent the startup message from being displayed
(setq inhibit-startup-message t)
;; store all backups in a central place
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
;; disable automatically saving files at intervals
(setq auto-save-default nil)
;; replaces all "answer yes or no" prompts with "answer y or n"
(fset 'yes-or-no-p 'y-or-n-p)
;; show trailing whitespace in red
(setq show-trailing-whitespace t)

(global-hl-line-mode 1)
(set-face-background 'hl-line "blue")
;; provides support for editing by visual lines instead of logical lines
(global-visual-line-mode 1)
;; make emacs highlight the marked region (in blue by default)
(transient-mark-mode 1)
;; makes selected region work like Windows (i.e., delete the entire thing)
(cua-selection-mode 1)

;; disable menubar when running emacs in a terminal
(if window-system (menu-bar-mode 1) (menu-bar-mode -1))
;; Disable Aquamacs' tool-bar
;; (http://www.emacswiki.org/cgi-bin/wiki/AquamacsFAQ#toc12)
(setq tool-bar-mode nil)
#+END_SRC
** hideshow.el
#+BEGIN_SRC emacs-lisp
;; HideShow
;; http://www.emacswiki.org/emacs/HideShow
(global-set-key (kbd "M-=") 'hs-toggle-hiding)
(global-set-key (kbd "M-+") 'hs-show-all)
(global-set-key (kbd "M-_") 'hs-hide-all)
(global-set-key (kbd "C-M-_") 'hs-hide-all)

(defadvice goto-line (after expand-after-goto-line
                            activate compile)
  "hideshow-expand affected block when using goto-line in a collapsed buffer"
  (save-excursion
    (hs-show-block)))

(defun display-code-line-counts (ov)
  (when (eq 'code (overlay-get ov 'hs))
    (overlay-put ov 'display
                 (format "... / %d"
                         (count-lines (overlay-start ov)
                                      (overlay-end ov))))))

(setq hs-set-up-overlay 'display-code-line-counts)
(setq hs-isearch-open t)

(add-hook 'conf-mode-hook 'hs-minor-mode)
(add-hook 'emacs-lisp-mode-hook 'hs-minor-mode)
(add-hook 'indented-text-mode-hook 'hs-minor-mode)
(add-hook 'java-mode-hook 'hs-minor-mode)
(add-hook 'perl-mode-hook 'hs-minor-mode)
(add-hook 'puppet-mode-hook 'hs-minor-mode)
(add-hook 'python-mode-hook 'hs-minor-mode)
(add-hook 'ruby-mode-hook 'hs-minor-mode)
(add-hook 'shell-mode-hook 'hs-minor-mode)

; Ruby HideShow support
(add-to-list 'hs-special-modes-alist
             '(ruby-mode
               "\\(def\\|do\\|{\\)" "\\(end\\|end\\|}\\)" "#"
               (lambda (arg) (ruby-end-of-block)) nil))
#+END_SRC
** keybindings.el
#+BEGIN_SRC emacs-lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Keyboard shortcut configuration ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Meta-<space> sets the mark.
(global-set-key "\M- " 'set-mark-command)
;; This one's just for fun.
;(global-set-key [f8] 'treemacs-toggle)
;; Control-Tab switches through windows
;(global-set-key [C-tab] 'other-window)
;(global-set-key [C-S-tab] '(lambda () (interactive) (other-window -1)))
(global-set-key "\C-x\C-a" 'execute-extended-command)
;;(global-set-key "\C-c\C-m" 'execute-extended-command)
(global-set-key [f7] 'call-last-kbd-macro)
;(global-set-key [f9] 'nav-toggle)

;; goto-line
(global-set-key "\M-g" 'goto-line)

;; search symbol at point
(global-set-key (kbd "C-M-s") 'isearch-forward-symbol-at-point)


;; undo
(global-set-key (kbd "C-/") 'undo)


;; these do not work in OS X iTerm2
;(global-set-key [M-up] 'scroll-up)
;(global-set-key [M-down] 'scroll-down)

;; make ^H give help instead of delete-backward-char
(add-hook 'term-setup-hook
          (lambda ()
           (when (getenv "TERM")
             (global-set-key "\C-h" 'help))))

;; S-{up,down,left,right}
(windmove-default-keybindings 'control)
;; when cursor is on edge, move to the other side, as in a toroidal space
(setq windmove-wrap-around t )
;; switch buffers quickly
(global-set-key (kbd "C-S-<left>") 'previous-buffer)
(global-set-key (kbd "C-S-<right>") 'next-buffer)


;; ;; https://www.emacswiki.org/emacs/WindMove
;; (defun ignore-error-wrapper (fn)
;;     "Funtion return new function that ignore errors.
;;    The function wraps a function with `ignore-errors' macro."
;;     (lexical-let ((fn fn))
;;       (lambda ()
;;         (interactive)
;;         (ignore-errors
;;           (funcall fn)))))
;;
;; (global-set-key [c-left] (ignore-error-wrapper 'windmove-left))
;; (global-set-key [c-right] (ignore-error-wrapper 'windmove-right))
;; (global-set-key [c-up] (ignore-error-wrapper 'windmove-up))
;; (global-set-key [c-down] (ignore-error-wrapper 'windmove-down))
#+END_SRC
** modes.el
#+BEGIN_SRC emacs-lisp
(autoload #'puppet-mode "puppet-mode" "Start puppet-mode" t)
(add-to-list 'auto-mode-alist '("\\.pp$" . puppet-mode))

(autoload #'php-mode "php-mode" "Start php-mode" t)
(add-to-list 'auto-mode-alist '("\\.php$" . php-mode))

(autoload 'js2-mode "js2" nil t)
(add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))

;; from https://github.com/rmm5t/dotfiles/blob/master/emacs.d/rmm5t/markdown-mode.el
(add-to-list 'auto-mode-alist '("\\.markdown$" . gfm-mode))
(add-to-list 'auto-mode-alist '("\\.md$" . gfm-mode))
(add-to-list 'auto-mode-alist '("\\.text$" . gfm-mode))

(eval-after-load 'markdown-mode
  '(progn
     (define-key markdown-mode-map (kbd "C-c C-v") 'markdown-preview)
     ))

(autoload 'markdown-mode "markdown-mode" nil t)
(autoload 'gfm-mode "gfm-mode" nil t)
(add-to-list 'auto-mode-alist '("\\.md$" . markdown-mode))
(add-to-list 'auto-mode-alist '("README\\.md$" . gfm-mode))
(setq markdown-command "multimarkdown")

(add-to-list 'auto-mode-alist '("\\.jsx\\'" . js-mode))
(defun my-js-mode-hook ()
  "Customizations"
  (setq js-indent-level 2)
  (setq indent-tabs-mode nil))
(add-hook 'js-mode-hook 'my-js-mode-hook)
#+END_SRCl
** orgmode.el
#+BEGIN_SRC emacs-lisp

;;;
;;; Org Mode
;;;

;;;;;;;;;;;;;;; org-mode ;;;;;;;;;;;;;;;
(add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\)$" . org-mode))
(require 'org)

;; disable org-journal keybindings
(define-key org-mode-map "\C-c\C-s" nil)
(define-key org-mode-map "\C-c\C-f" nil)
(define-key org-mode-map "\C-c\C-b" nil)
(define-key org-mode-map "\C-c\C-j" nil)

;(require 'org-protocol)
(setq org-refile-use-outline-path 'file)
(setq org-refile-targets (quote (
                                 (nil :maxlevel . 9)
                                 (org-agenda-files :maxlevel . 6)
                                 (org-agenda-files :tag . "heading")
                                 (org-agenda-files :tag . "project")
                                 (org-agenda-files :todo . "PROJ")
                                 )))
(setq org-completion-use-ido nil)
(setq org-outline-path-complete-in-steps nil)
(setq org-refile-allow-creating-parent-nodes 'confirm)
(setq org-refile-use-cache t)
(run-with-idle-timer 300 t (lambda ()
                             (org-refile-cache-clear)
                             (org-refile-get-targets)))

;; Adding TODO keywords
;; http://orgmode.org/manual/Workflow-states.html#Workflow-states
(setq org-todo-keywords '((sequence "TODO(t)" "LIVE(l)" "WAIT(w)" "|"
                                    "SOMEDAY(s)" "WONT(n)" "DONE(d)" "PROJ(p)")))

;; make org files quite a bit prettier -- http://doc.rix.si/cce/cce-org.html#org635a684
;(require 'org-indent)
;(setq org-startup-indented t)
;(diminish 'org-indent-mode )
(setq org-hide-leading-stars nil)
(setq org-cycle-separator-lines 2)



;;;;;;;;;;;;;;; org-agenda ;;;;;;;;;;;;;;;
(define-key global-map "\C-ca" 'org-agenda)
(define-key global-map (kbd "<f12>")
          (lambda () (interactive) (org-agenda nil "a")))
;(setq org-agenda-files (list "~/org" "~/org/journal"))
(setq org-agenda-file-regexp "\\`[^.].*\\.org\\'\\|\\`[0-9]+\\'")


;;;;;;;;;;;;;;; org-journal ;;;;;;;;;;;;;;;
(defvar org-journal-dir (concat org-directory "/journal"))
(require 'org-journal)
(setq org-journal-carryover-items nil)
(setq org-journal-enable-agenda-integration t)
(setq org-journal-time-format "<%Y-%m-%d %a %H:%M> ")

(define-key global-map "\C-cj" 'org-journal-new-scheduled-entry)



(defun org-journal-find-location ()
  ;; Open today's journal, but specify a non-nil prefix argument in order to
  ;; inhibit inserting the heading; org-capture will insert the heading.
  (org-journal-new-entry t)
  ;; Position point on the journal's top-level heading so that org-capture
  ;; will add the new entry as a child entry.
  (goto-char (point-min)))


;;;;;;;;;;;;;;; org-capture ;;;;;;;;;;;;;;;
;; http://orgmode.org/manual/Setting-up-capture.html#Setting-up-capture
(setq org-default-notes-file (concat org-directory "/activity.org"))
(define-key global-map "\C-cc" 'org-capture)
(define-key org-mode-map "\C-cl" 'org-store-link)
(define-key org-mode-map "\C-ci" 'org-insert-last-stored-link)



;; make the frame contain a single window. by
;; default org-remember splits the window.
;; CRITICAL
(add-hook 'org-capture-mode-hook
          'delete-other-windows)

;; CRITICAL
(defun make-capture-frame ()
  "Create a new frame and run org-capture."
  (interactive)
  (make-frame '((name . "*Capture*")
                 (width . 80)
                 (height . 40)
                 (vertical-scroll-bars . nil)
                 (menu-bar-lines . nil)
                 (tool-bar-lines . nil)))
  (select-frame-by-name "*Capture*")
  (delete-other-frames)
  (org-capture nil)
)

(setq org-capture-templates
      (quote (
("n" "Notes (inbox.org)" entry (file+headline
org-default-notes-file "Activity")
"* %^{Description} %^g %?
Added: %U")

)))

;; ("j" "Journal Entry (daily file)" entry (function org-journal-find-location)
;; "** %T - %^{Activity}")

;; ("a" "Appointment" entry (file+headline
;; org-default-notes-file "Calendar")
;; "* APPT %^{Description} %^g
;; %?
;; Added: %U")

; ("t" "Task Diary" entry (file+datetree
; org-default-notes-file)
; "* TODO %^{Description}  %^g
; %?
; Added: %U")

;; ("j" "Journal entry" entry (function org-journal-find-location)
;; "* %(format-time-string org-journal-time-format)%^{Title}\n%i%?")
;; ;"* %(format-time-string org-journal-time-format)%i%?")



;; Notes
;; in-buffer settings: http://orgmode.org/manual/In_002dbuffer-settings.html
;; cheat sheet: http://orgmode.org/orgcard.txt

;;; https://blog.aaronbieber.com/2016/09/24/an-agenda-for-life-with-org-mode.html

(defun air-org-skip-subtree-if-priority (priority)
  "Skip an agenda subtree if it has a priority of PRIORITY.

PRIORITY may be one of the characters ?A, ?B, or ?C."
  (let ((subtree-end (save-excursion (org-end-of-subtree t)))
        (pri-value (* 1000 (- org-lowest-priority priority)))
        (pri-current (org-get-priority (thing-at-point 'line t))))
    (if (= pri-value pri-current)
        subtree-end
      nil)))

(setq org-agenda-custom-commands
      '(("c" "Simple agenda view"
         ((tags "PRIORITY=\"A\""
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "High-priority unfinished tasks:")))
          (agenda "")
          (alltodo ""
                   ((org-agenda-skip-function
                     '(or (air-org-skip-subtree-if-priority ?A)
                          (org-agenda-skip-if nil '(scheduled deadline))))))))))


(defun air-pop-to-org-agenda (&optional split)
  "Visit the org agenda, in the current window or a SPLIT."
  (interactive "P")
  (org-agenda nil "c")
  (when (not split)
    (delete-other-windows)))

(define-key global-map (kbd "M-SPC") 'air-pop-to-org-agenda)

;;;;;;;;;;;;;;; org-babel ;;;;;;;;;;;;;;;

;; http://cachestocaches.com/2018/6/org-literate-programming/

;; Run/highlight code using babel in org-mode
(org-babel-do-load-languages
 'org-babel-load-languages
 '(
   (python . t)
   (shell . t)
   ;; Include other languages here...
   ))
;; Syntax highlight in #+BEGIN_SRC blocks
(setq org-src-fontify-natively t)
;; Don't prompt before running code in org
(setq org-confirm-babel-evaluate nil)
;; Fix an incompatibility between the ob-async and ob-ipython packages
(setq ob-async-no-async-languages-alist '("ipython"))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; archived
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; #+TITLE: Adam's Org-mode Emacs configuration
;; #+OPTIONS: toc:4 h:4
;; #+STARTUP: showeverything
;; #+PROPERTY: header-args:emacs-lisp    :tangle yes
;;
;; * Configuration
;; ** About this file
;;    :PROPERTIES:
;;    :CUSTOM_ID: babel-init
;;    :END:
;; <<babel-init>>
;;
;;
;; ** Starting up
;;
;; #+begin_src emacs-lisp
;; ;; This sets up the load path so that we can override it
;; (package-initialize)
;; #+END_SRC

; (setq org-capture-templates '(("j" "Journal entry" entry (function org-journal-find-location)
;                                "* %(format-time-string org-journal-time-format)%^{Title}\n%i%?")))
;

; (defun pc/new-buffer-p ()
;     (not (file-exists-p (buffer-file-name))))
;
;   (defun pc/insert-journal-template ()
;     (let ((template-file (expand-file-name "template.org" org-directory)))
;       (when (pc/new-buffer-p)
;         (save-excursion
;           (goto-char (point-min))
;           (insert-file-contents template-file)))))
;
;   (add-hook 'org-journal-after-entry-create-hook #'pc/insert-journal-template)

;(setq org-journal-date-prefix "** ")

;; TODO: set up all journal files to be included in the agenda generation guy

(defun bh/verify-refile-target ()
  "Exclude todo keywords with a done state from refile targets"
  (member (nth 5 (org-heading-components)) (quote "project"))) ;Note - "org-done-keywords"?

(defun bh/verify-refile-target2 ()
  "Exclude todo keywords with a done state from refile targets"
  (member (nth 2 (org-heading-components)) (quote "DONE"))) ;Note - "org-done-keywords"?

;;(setq org-refile-target-verify-function 'bh/verify-refile-target2)


;;(setq helm-org-headings-fontify t)


;; (setq org-capture-templates '(
;;
;;       ("t" "Todo list item"
;;        entry (file+headline org-default-notes-file "Tasks")
;;        "* TODO %?\n %i\n %a"
;;        )
;;
;;       ("p" "Project idea"
;;        entry (file+headline org-default-notes-file "Projects")
;;        "** PROJ %?\n %i\n %a"
;;        )
;;
;;       ("b" "Tidbit: quote, zinger, one-liner or textlet"
;;        entry
;;        (file+headline org-default-notes-file "Tidbits")
;;        "* %^{Name} captured %U\n%^{Tidbit type|quote|zinger|one-liner|textlet}\nPossible Inspiration: %a %i\n%?"
;;        )
;;
;;       ("l" "A link, for reading later." entry
;;        (file+headline "notes.org" "Reading List")
;;        "* %:description\n%u\n\n%c\n\n%i"
;;                 :empty-lines 1)
;;
;;       ("L" "Protocol Link" entry (file+headline ,(concat org-directory "notes.org") "Inbox")
;;        "* %? [[%:link][%:description]] %(progn (setq kk/delete-frame-after-capture 2) \"\")\nCaptured On: %U"
;;        :empty-lines 1)
;;
;;
;;       ))

; ("k" "Journal entry" entry (function org-journal-find-location)
;                                "* %(format-time-string org-journal-time-format)%^{Title}\n%i%?")
;
; ("f" "Journal entry" plain
; (file+datetree+prompt "~/org/journal2.org")
; "%K - %a\n%i\n%?\n")







; (defun org-agenda-show-tasks (&optional arg)
;   (interactive "P")
;   (org-agenda arg "a"))
; (define-key org-mode-map (kbd "<f12>") 'org-agenda-show-tasks)

; ;; Org-mode settings
; (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
; (global-set-key "\C-ca" 'org-agenda)
; (setq org-cycle-emulate-tab 'white)

;; ;; org2blog support
;; ;; https://github.com/punchagan/org2blog
;; (require 'org2blog-autoloads)
;; (setq org2blog/wp-use-sourcecode-shortcode t)
;; (setq org2blog/wp-blog-alist
;;        '(("ajc"
;;           :url "http://ajcsystems.com/blog/xmlrpc.php"
;;           :username "adamc"
;;           :default-title "Hello World"
;;           :default-categories ("org2blog" "emacs")
;;           :tags-as-categories nil)))
;;
;; (setq org2blog/wp-buffer-template
;; "#+DATE: %s
;; #+OPTIONS: toc:nil num:nil todo:nil pri:nil tags:nil ^:nil TeX:nil
;; #+CATEGORY:
;; #+TAGS:
;; #+PERMALINK:
;; #+TITLE:
;; \n
;; #+HTML: <!--more-->
;; \n")

; ;; http://orgmode.org/worg/org-tutorials/org-custom-agenda-commands.html
;
; (setq org-agenda-custom-commands-222
;       '(("Q" . "Custom queries") ;; gives label to "Q"
;         ;("Qa" "Archive search" search ""
;         ; ((org-agenda-files (file-expand-wildcards "~/org/archive/*.org"))))
;         ;("Qb" "Projects and Archive" search ""
;         ; ((org-agenda-text-search-extra-files (file-expand-wildcards "~/org/archive/*.org"))))
;         ;; searches both projects and archive directories
;         ;("QA" "Archive tags search" org-tags-view ""
;         ; ((org-agenda-files (file-expand-wildcards "~/org/archive/*.org"))))
;         ;; ...other commands here
;         ("P" "Projects" search ""
;          ((org-agenda-text-search-extra-files (file-expand-wildcards "~/org/projects/*.org"))))
;         )
;       )
;
                                        ;

; ;; Use '-' as the bullet list exclusively.
; (setq org-list-demote-modify-bullet '(("+" . "-")
;                                       ("*" . "-")
;                                       ("1." . "-")
;                                       ("1)" . "-")
;                                       ("A)" . "-")
;                                       ("B)" . "-")
;                                       ("a)" . "-")
;                                       ("b)" . "-")
;                                       ("A." . "-")
;                                       ("B." . "-")
;                                       ("a." . "-")
;                                       ("b." . "-")))



; (setq daypage-path "~/org/daypages/")
;
; (defun tom-show-agenda ()
;   (interactive)
;   (delete-other-windows)
;   (org-agenda-list)
;   (calendar)
;   (other-window 1)
;   (split-window-vertically)
;   (other-window 1)
;   (todays-daypage))
;
;
; (require 'org-daypage)
;


;;;; this put entries into a single file
; ("j" "Journal" entry (file+datetree org-journal-file)
;  "* %?\n\n  %i\n  Time: %U\n  From: %a"
;  :empty-lines 1)
;(defvar org-journal-file (concat org-directory "/journal.org")
;    "Path to OrgMode journal file.")


;; (defun org-journal-find-location ()
;;   ;; Open today's journal, but specify a non-nil prefix argument in order to
;;   ;; inhibit inserting the heading; org-capture will insert the heading.
;;   (org-journal-new-entry t)
;;   ;; Position point on the journal's top-level heading so that org-capture
;;   ;; will add the new entry as a child entry.
;;   (goto-char (point-min)))
;;
;; (defun get-journal-file-today ()
;;   "Return filename for today's journal entry."
;;   (let ((daily-name (format-time-string "%Y%m%d")))
;;     (expand-file-name (concat org-directory "/journal/" daily-name))))
;;
;; (defun journal-file-today ()
;;   "Create and load a journal file based on today's date."
;;   (interactive)
;;   (find-file (get-journal-file-today)))
;;
;; (global-set-key (kbd "C-c f j") 'journal-file-today)
;;
;; (add-to-list 'load-path (expand-file-name "~/git/org-mode/lisp"))


(defun org-search ()
  (interactive)
  (org-refile '(4)))
(define-key global-map "\C-c\C-g" 'org-search)
;;

; disable SLOW SLOW flyspell
(flyspell-mode -1)



#+END_SRC
** parens.el
#+BEGIN_SRC emacs-lisp
(defun forward-or-backward-sexp (&optional arg)
  "Go to the matching parenthesis character if one is adjacent to point."
  (interactive "^p")
  (cond ((looking-at "\\s(") (forward-sexp arg))
        ((looking-back "\\s)" 1) (backward-sexp arg))
        ;; Now, try to succeed from inside of a bracket
        ((looking-at "\\s)") (forward-char) (backward-sexp arg))
        ((looking-back "\\s(" 1) (backward-char) (forward-sexp arg))))

(global-set-key (kbd "C-\\") 'forward-or-backward-sexp)
#+END_SRC
** recentf.el
#+BEGIN_SRC emacs-lisp
;; recentf stuff -- http://www.joegrossberg.com/archives/000182.html
(require 'recentf)
(recentf-mode)
(setq recentf-max-menu-items 25)
(global-set-key "\C-x\ \C-r" 'recentf-open-files)
#+END_SRC
** theme.el
#+BEGIN_SRC emacs-lisp
  ;; ;;;;;;;;;;;;;;;;;;
  ;; ;; Color Themes ;;
  ;; ;;;;;;;;;;;;;;;;;;
  ;; ;; reference: http://raebear.net/comp/emacscolors.html
  ;; ;(add-to-list 'load-path "~/elisp/color-theme")
  ;; ;(autoload 'color-theme-select "color-theme" "Enable wheely mouse")
  ;; (require 'color-theme)
  ;; (color-theme-initialize)
  ;; (setq color-theme-is-global t)

  ;; ;(color-theme-parus)
  ;; ;(color-theme-arjen)
  ;; ;(color-theme-molokai)
  ;; ;(color-theme-colorful-obsolescence)

  ; this appears to be broken
  ;(set-face-background 'hl-line "color-52")
  ;; M-x helm-colors to see the available options


  ;(color-theme-solarized-dark)
  ;(load-theme 'zenburn t)
  ;(color-theme-clarity)
  ;(color-theme-tty-dark)
#+END_SRC
* Other config
** tabbar.el
https://www.emacswiki.org/emacs/TabBarMode
i need to figure out how to turn this on only for graphical frames :-P
M-x tabbar-mode
** org-journal-list
#+BEGIN_SRC emacs-lisp
  ;; (use-package org-journal-list
  ;;        :ensure t
  ;;        :config
  ;;        (setq org-journal-list-default-directory "~/org/journal/")
  ;;        (setq org-journal-list-default-suffix ".org"))
#+END_SRC
